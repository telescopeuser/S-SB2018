x <- c(2,1,3)
2 + x
x > 1
x + c(1,2)
rm(list=ls())
?factor
attach(BondFunds)
## import data
BondFunds <- read.csv("BondFunds.csv")
attach(BondFunds)
attach(BondFunds)
## histogram with normal curve
hist(Return2009, breaks=15, prob=T)
curve(dnorm(x, mean(Return2009), sd(Return2009)),
add=TRUE, col="red", lwd=2)
lines(density(Return2009), col="blue")
detach(BondFunds)
## import data
BondFunds <- read.csv("BondFunds.csv")
attach(BondFunds)
## construct a q-q plot
qqnorm(Return2009, col="blue", xlab="z Value",
ylab="Return2009")
qqline(Return2009, col="red", lwd=2)
detach(BondFunds)
## count frequency for each category
counts_cyl = table(mtcars$cyl)
counts_cyl
## plot basic bar chart
barplot(counts_cyl)
## plot a simple histogram
hist(mtcars$mpg)
## plot histogram with specified bins
hist(mtcars$mpg, breaks=12, xlab="Miles Per Gallon", main="Histogram with 12 Bins")
boxplot(mtcars$mpg, main = "Boxplot of Miles/Gallon")
boxplot(mtcars$mpg~factor(mtcars$vs), main = "Boxplot of Miles/Gallon for Different Engine Types")
## basic scatter plot of MPG vs. Weight
plot(mtcars$wt, mtcars$mpg, main="Simple Scatter Plot of MPG vs. Weight", xlab="Car Weight (lbs/1000)", ylab="Miles Per Gallon")
## add a line to fit the data
abline(lm(mpg~wt, data = mtcars))
getwd()
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/R-2018-01-22/")
getwd()
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/setwd/")
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/setwd/")
getwd()
library()
print("Hello World!")
print("Hello World!")
history
history()
install.packages('ggplot')
install.packages('ggplot2')
library('ggplot2')
example('ggplot2')
?ggplot2
install.packages("ggplot2")
q()
getwd()
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/setwd/")
getwd()
install.packages('ggplot2')
# install.packages('ggplot2')
library('ggplot2')
example('ggplot2')
?ggplot2
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/setwd")
# Create a vector  with the c() function.
age <- c(32, 45, 25, 39, 99) 	# create a numeric vector
country <- c("US", "US", "UK", "UK", "UK") # create a character vector
age = c(32, 45, 25, 39, 99)
country = c("US", "US", "UK", "UK", "UK")
age[1]
age[c(1,3,5)]
country[2:4]
country[c(1,5)]
#Element-wise addition Most operators work element-wise, i.e. they operate on each element.
x = c(2, 1, 3)
2 + x
x > 1
x + c(1, 2)
ggg = x + c(1, 2)
ggg
x + c(1, 2)
manager = c(1,2,3,4,5)
country = c("US", "US", "UK", "UK", "UK")
gender = c("M", "F", "F", "M", "F")
age = c(32, 45, 25, 39, 99)
q1 = c(5, 3, 3, 3, 2)
q2 = c(4, 5, 5, 3, 2)
q3 = c(5, 2, 5, 4, 1)
q4 = c(5, 5, 5, NA, 2)
q5 = c(5, 5, 2, NA, 1)
# create a data frame by combining all the column vectors
leadership = data.frame(manager, country, gender, age, q1, q2, q3, q4, q5)
leadership[2:4,] # access rows 2-4
x = list(a='2.5', b=TRUE, c=1:3)
x
x$a
x = list(a='2.5', b=TRUE, cake=1:3)
x
x$cake
x$cake +1
x$a +1
x$b +1
x = list(a='2.5', b=TRUE, cake=1:3)
x$b
x$cake +1
x$b +1
x$a +1
x
x = list(a='x2.5', b=TRUE, cake=1:3)
x$b
x$a
x$cake +1
x$a +1
x
x$b +1
x = list(a='x2.5', b=FALSE, cake=1:3)
x$b +1
x$a +1
x = list(a='x2.5', b=FALSE, cake=1:3)
x$a
x$a +1
x$b +1
x$c +1
x = list(a='2.5', b=FALSE, cake=1:3)
x$a +1
x$b +1
x$c +1
age = c(32, 45, 25, 39, 99)
country = c("US", "US", "UK", "UK", "UK")
age[1]
age[c(1,3,5)]
country[2:4]
country[c(1,5)]
#Element-wise addition Most operators work element-wise, i.e. they operate on each element.
x = c(2, 1, 3)
2 + x
x > 1
x + c(1, 2)
manager = c(1,2,3,4,5)
country = c("US", "US", "UK", "UK", "UK")
gender = c("M", "F", "F", "M", "F")
age = c(32, 45, 25, 39, 99)
q1 = c(5, 3, 3, 3, 2)
q2 = c(4, 5, 5, 3, 2)
q3 = c(5, 2, 5, 4, 1)
q4 = c(5, 5, 5, NA, 2)
q5 = c(5, 5, 2, NA, 1)
# create a data frame by combining all the column vectors
leadership = data.frame(manager, country, gender, age, q1, q2, q3, q4, q5)
leadership[2:4,] # access rows 2-4
leadership[,2:4] # access columns 2-4
leadership
leadership
x = list(a='2.5', b=TRUE, cake=1:3)
x$a +1
x$b +1
x$c +1
x = list(a='2.5', b=TRUE, c=1:3)
x$a +1
x$b +1
x$c +1
leadership
leadership[2:4,] # access rows 2-4
leadership[,2:4] # access columns 2-4
leadership[,c('country', 'gender', 'age')] # same
leadership$age # extract the variable age
leadership$age[2] # extract the 2nd element of the variable age
leadership[5,5:9]
leadership[5, 3]
leadership = data.frame(manager, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
# check the gender variable again
leadership$gender
# encode the gender vector as factor
leadership$gender = factor(leadership$gender)
# check the gender variable again
leadership$gender
getwd()
# check the gender variable again
leadership$gender
# encode the gender vector as factor
leadership$gender = factor(leadership$gender)
# encode the country vector as factor
leadership$country = factor(leadership$country)
# copy text data file to your working directory
# import data from a space-delimited text file
leadershipTXT = read.table("leadership.txt", header=TRUE, sep=' ', stringsAsFactors=FALSE)
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/R-2018-01-22/")
getwd()
# copy text data file to your working directory
# import data from a space-delimited text file
leadershipTXT = read.table("leadership.txt", header=TRUE, sep=' ', stringsAsFactors=FALSE)
# copy csv data file to your working directory
# import data from a comma-delimited file
leadershipCSV = read.table("leadership.csv", header=TRUE, sep=',', stringsAsFactors=FALSE)
# Save a dataset to a comma-delimited file in the current working directory
write.table(leadershipCSV,'leadershipcsv.txt', sep=",")
#Saving dataframe into rdata file:
save(leadership, file='leadership.Rda')
#To call the data :
load('leadership.Rda')
# recode 99 for age to missing
# if the element in the age column equals to 99
# this element will be changed to NA
leadership$age[leadership$age==99] = NA
# recode the age variable to a categorical variable
leadership$agecat[leadership$age<=55] = "Young"
leadership$agecat[leadership$age>55 & leadership$age<=75] = "Middle Aged"
leadership$agecat[leadership$age>75] = "Elder"
# identify missing values
is.na(leadership)
# exclude missing values in calculation
mean(leadership$q4, na.rm=TRUE)
# remove observations with missing values
leadershipNoMissing = na.omit(leadership)
leadership[5,5:9]
leadership[5, 3]
# create a data frame by combining all the column vectors
leadership = data.frame(manager, country, gender, age, q1, q2, q3, q4, q5)
leadership[2:4,] # access rows 2-4
leadership[,2:4] # access columns 2-4
leadership[,c('country', 'gender', 'age')] # same
leadership$age # extract the variable age
leadership$age[2] # extract the 2nd element of the variable age
leadership[5,5:9]
leadership[5, 3]
manager = c(1,2,3,4,5)
country = c("US", "US", "UK", "UK", "UK")
gender = c("M", "F", "F", "M", "F")
age = c(32, 45, 25, 39, 99)
q1 = c(5, 3, 3, 3, 2)
q2 = c(4, 5, 5, 3, 2)
q3 = c(5, 2, 5, 4, 1)
q4 = c(5, 5, 5, NA, 2)
q5 = c(5, 5, 2, NA, 1)
# create a data frame by combining all the column vectors
leadership = data.frame(manager, country, gender, age, q1, q2, q3, q4, q5)
leadership[2:4,] # access rows 2-4
leadership[,2:4] # access columns 2-4
leadership[,c('country', 'gender', 'age')] # same
leadership$age # extract the variable age
leadership$age[2] # extract the 2nd element of the variable age
leadership[5,5:9]
leadership[5, 3]
leadership = data.frame(manager, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors=FALSE)
# check the gender variable again
leadership$gender
# encode the gender vector as factor
leadership$gender = factor(leadership$gender)
# encode the country vector as factor
leadership$country = factor(leadership$country)
# encode the gender vector as factor
leadership$gender = factor(leadership$gender)
# encode the country vector as factor
leadership$country = factor(leadership$country)
# copy text data file to your working directory
# import data from a space-delimited text file
leadershipTXT = read.table("leadership.txt", header=TRUE, sep=' ', stringsAsFactors=FALSE)
# copy csv data file to your working directory
# import data from a comma-delimited file
leadershipCSV = read.table("leadership.csv", header=TRUE, sep=',', stringsAsFactors=FALSE)
# Save a dataset to a comma-delimited file in the current working directory
write.table(leadershipCSV,'leadershipcsv.txt', sep=",")
#Saving dataframe into rdata file:
save(leadership, file='leadership.Rda')
#To call the data :
load('leadership.Rda')
# recode 99 for age to missing
# if the element in the age column equals to 99
# this element will be changed to NA
leadership$age[leadership$age==99] = NA
# recode the age variable to a categorical variable
leadership$agecat[leadership$age<=55] = "Young"
leadership$agecat[leadership$age>55 & leadership$age<=75] = "Middle Aged"
leadership$agecat[leadership$age>75] = "Elder"
# identify missing values
is.na(leadership)
# exclude missing values in calculation
mean(leadership$q4, na.rm=TRUE)
View(leadershipTXT)
# identify missing values
is.na(leadership)
# exclude missing values in calculation
mean(leadership$q4, na.rm=TRUE)
# remove observations with missing values
leadershipNoMissing = na.omit(leadership)
View(leadership)
# remove observations with missing values
leadershipNoMissing = na.omit(leadership)
View(leadershipNoMissing)
# exclude missing values in calculation
mean(leadership$q4, na.rm=TRUE)
# remove observations with missing values
leadershipNoMissing = na.omit(leadership)
# create a mean score
attach(leadership)
leadership$mean = (q1+q2+q3+q4+q5)/5
detach(leadership)
# select observations in UK only and keep the variables q1 through q5
leadershipSubset = subset(leadership, leadership$country=="UK", select=q1:q5)
leadershipSubset
leadershipSubset
###########################################################
# working directory
###########################################################
getwd()
#setwd("/home/iss-user/Desktop/workshop")
setwd("/media/sf_iss-vm-vbox-sf/github/S-SB2018/Day1-2/R")
#setwd("/home/iss-user/Desktop/workshop")
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/R-2018-01-22/")
getwd()
mtcars
## count frequency for each category
counts_cyl = table(mtcars$cyl)
counts_cyl
mtcars
?table()
## plot basic bar chart
barplot(counts_cyl)
?table()
counts_cyl
mtcars$cyl
## count frequency for each category
counts_cyl = table(mtcars$cyl)
counts_cyl
?table()
## plot basic bar chart
barplot(counts_cyl)
## plot a simple histogram
hist(mtcars$mpg)
## plot basic bar chart
barplot(counts_cyl)
## plot basic bar chart
barplot(counts_cyl)
## plot basic bar chart
barplot(counts_cyl)
## plot basic bar chart
barplot(counts_cyl)
## plot a simple histogram
hist(mtcars$mpg)
## plot histogram with specified bins
hist(mtcars$mpg, breaks=12, xlab="Miles Per Gallon", main="Histogram with 12 Bins")
## plot basic bar chart
barplot(counts_cyl)
## plot a simple histogram
hist(mtcars$mpg)
hist(mtcars$cyl)
## plot basic bar chart
barplot(counts_cyl)
hist(mtcars$cyl)
## plot basic bar chart
barplot(counts_cyl)
hist(mtcars$cyl)
## plot a simple histogram
hist(mtcars$mpg)
boxplot(mtcars$mpg, main = "Boxplot of Miles/Gallon")
boxplot(mtcars$mpg~factor(mtcars$vs), main = "Boxplot of Miles/Gallon for Different Engine Types")
## plot a simple histogram
hist(mtcars$mpg)
## plot histogram with specified bins
hist(mtcars$mpg, breaks=12, xlab="Miles Per Gallon", main="Histogram with 12 Bins")
barplot(mtcars$cyl)
pie(mtcars$cyl)
pie(counts_cyl)
pie(mtcars$cyl)
## count frequency for each category
counts_cyl = table(mtcars$cyl)
mtcars$cyl
barplot(mtcars$cyl)
## count frequency for each category
counts_cyl = table(mtcars$cyl)
scatterplot(mtcars$cyl)
scatter(mtcars$cyl)
scatter.smooth(mtcars$cyl)
## count frequency for each category
counts_cyl = table(mtcars$cyl)
?table()
counts_cyl
## plot basic bar chart
barplot(counts_cyl)
pie(counts_cyl)
hist(mtcars$cyl)
## plot a simple histogram
hist(mtcars$mpg)
## plot histogram with specified bins
hist(mtcars$mpg, breaks=12, xlab="Miles Per Gallon", main="Histogram with 12 Bins")
boxplot(mtcars$mpg, main = "Boxplot of Miles/Gallon")
boxplot(mtcars$mpg~factor(mtcars$vs), main = "Boxplot of Miles/Gallon for Different Engine Types")
# boxplot
boxplot(mtcars$mpg, main = "Boxplot of Miles/Gallon")
boxplot(mtcars$mpg~factor(mtcars$vs), main = "Boxplot of Miles/Gallon for Different Engine Types")
## basic scatter plot of MPG vs. Weight
plot(mtcars$wt, mtcars$mpg, main="Simple Scatter Plot of MPG vs. Weight", xlab="Car Weight (lbs/1000)", ylab="Miles Per Gallon")
## add a line to fit the data
abline(lm(mpg~wt, data = mtcars))
plot(mtcars)
## more 'graphics' package information and examples
library(help='graphics')
example('table')
example('barplot')
example('hist')
example('abline')
example('colors')
unique(mtcars$mpg)
length(unique(mtcars$mpg))
library(readr)
GSS2012 <- read_csv("GSS2012.csv", na = "0")
View(GSS2012)
GSS2012$sex
hist(GSS2012$sex)
plot(GSS2012$sex)
barplot(GSS2012$sex)
barplot(GSS2012$sex-1)
x = list(a='2.5', b=TRUE, c=1:3)
x = list(a='2.5', b=TRUE, c=1:3)
x$a +1
x$b +1
x$c +1
leadership
summary(GSS2012)
x = list(a=2.5x, b=TRUE, c=1:3)
x = list(a='2.5x', b=TRUE, c=1:3)
x$a +1
x$b +1
x$c +1
leadership
x = list(a=2.5, b=TRUE, c=1:3)
x$a +1
x$b +1
x$c +1
x +1
x = list(a=2.5, b=TRUE, c=1:3)
x + 1
x$a +1
x$b +1
x$c +1
x = list(a=2.5, b=TRUE, c=1:3)
x$a
x + 1
x = list(a=2.5, b=3, c=1:3)
x + 1
x = list(a=2.5, b=3, c=1:3)
x + 1
x = list(a=2.5, b=3, c=3)
x$a
x + 1
x
type(x)
x$a +1
x$b +1
x$c +1
x = list(a='2.5', b=TRUE, c=1:3)
x$a +1
x$b +1
x$c +1
x = list(a=2.5, b=3, c=3)
x + 1
x = list(a='2.5', b=TRUE, c=1:3)
x + 1
x$a +1
x$b +1
x$c +1
leadership
x = list('2.5', TRUE, 1:3)
x + 1
x
x[0] +1
x[1] +1
x[0]
x[1]
x[2]
x[3]
x[0] + 1
x[1] + 1
x[2] + 1
x[3] + 1
x[0]
x[1]
x[2]
x[3]
x[3][0]
x[3][1]
x[3][1] + 1
x[3] + 1
x = list(2.5, TRUE, 1:3)
x[0]
x[1]
x[2]
x[3]
x[3][1]
x + 1
x[0] + 1
x[1] + 1
x[2] + 1
x[3] + 1
x[3][1] + 1
x + 1
x$a +1
x$b +1
x$c +1
x = list(a='2.5', b=TRUE, c=1:3)
x + 1
x$a +1
x$b +1
x$c +1
leadership
getwd()
getwd()
setwd("/media/sf_vm_shared_folder/my_github_repo/S-SB2018/telescopeuser/R-2018-01-22")
install.packages(c("arules", "digest", "dotCall64", "fpc", "hexbin", "Hmisc", "htmlTable", "htmlwidgets", "irlba", "knitr", "proxy", "Rcpp", "RCurl", "rprojroot", "shinyjs", "sp", "summarytools", "tibble", "viridis", "visNetwork", "zoo"))
