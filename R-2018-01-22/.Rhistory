getwd()
setwd("/media/sf_vm_shared_folder/git_sync_master/UAT-S-SB2018/R-2018-01-22/")
getwd()
getwd()
## import data
MShopping = read.csv("MShopping.csv")
attach(MShopping)
## count the numbers of "Yes" and "No"
table(MShopping)
## 95% confidence interval
prop.test(325, n=465)
## 99% confidence interval
prop.test(325, n=465, conf.level = 0.99)
## chi-square test
prop.test(325, n=465, p=0.66, correct=FALSE)
detach(MShopping)
## import data
MShopping = read.csv("MShopping2.csv")
attach(MShopping)
## count the numbers of "Yes" and "No"
table(MShopping)
## 95% confidence interval
prop.test(325, n=465)
## count the numbers of "Yes" and "No"
table(MShopping)
## 95% confidence interval
prop.test(325, n=465)
## 99% confidence interval
prop.test(325, n=465, conf.level = 0.99)
## import data
MShopping = read.csv("MShopping.csv")
attach(MShopping)
## count the numbers of "Yes" and "No"
table(MShopping)
## 95% confidence interval
prop.test(325, n=465)
## 99% confidence interval
prop.test(325, n=465, conf.level = 0.99)
## chi-square test
prop.test(325, n=465, p=0.66, correct=FALSE)
## chi-square test
prop.test(325, n=465, p=0.7, correct=FALSE)
## chi-square test
prop.test(325, n=465, p=0.66, correct=FALSE)
#create a vector for response = will choose
WillChoose = c(163, 154)
#create a vector for total responses
TotalRespondents = c(227, 262)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=0.65, correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=(0.65, 0.65), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.65, 0.65), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.7, 0.65), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.65, 0.65), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.60, 0.60), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.50, 0.50), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.648261758691207, 0.648261758691207), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.648261758691207, 0.648261758691207), correct = FALSE)
## 95% confidence interval
prop.test(325, n=465)
## 99% confidence interval
prop.test(325, n=465, conf.level = 0.99)
## chi-square test
prop.test(325, n=465, p=0.66, correct=FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.648261758691207, 0.351738241308793), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.648261758691207, 0.648261758691207), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.648261758691207, 0.648261758691207), correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, correct = FALSE)
#run a chi square proportions test
prop.test(WillChoose, TotalRespondents, p=c(0.648261758691207, 0.648261758691207), correct = FALSE)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 30,
value = 15)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
setwd("C:/Users/ISSPNR/Desktop/SSB/SIA run nov 20/R")
library(ggplot2)
t = read.csv("titanic3.csv")
#plot(t)
ggplot(t, aes(age)) + geom_histogram(binwidth = input$bins)
})
}
# Run the application
shinyApp(ui = ui, server = server)
# Run the application
shinyApp(ui = ui, server = server)
getwd()
# generate bins based on input$bins from ui.R
setwd("/media/sf_vm_shared_folder/git_sync_master/UAT-S-SB2018/R-2018-01-22")
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
setwd("/media/sf_vm_shared_folder/git_sync_master/UAT-S-SB2018/R-2018-01-22")
library(ggplot2)
t = read.csv("titanic3.csv")
#plot(t)
ggplot(t, aes(age)) + geom_histogram(binwidth = input$bins)
})
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
hist(x, breaks = bins, col = 'darkgray', border = 'white')
})
}
# Run the application
shinyApp(ui = ui, server = server)
